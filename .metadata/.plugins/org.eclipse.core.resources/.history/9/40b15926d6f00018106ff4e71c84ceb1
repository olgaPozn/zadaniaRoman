package zadaniaDodatkowe;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class ArraysAndStrings {
	//<1.1
	/*
	 * implement an algorithm to determine if a string has all unique characters.
	 */
	private boolean uniqueCharactersBit(String str){
		int checker = 0; //a-z string
		
		for(int i = 0; i < str.length(); i++){
			int bitAtIndex = str.charAt(i) - 'a';
			if((checker & (1 << bitAtIndex)) > 0)
				return false;
			checker = checker | (1 << bitAtIndex);
		}
		return true;	
	}
	protected static void displayUniqueCharacters(String input){
		ArraysAndStrings test = new ArraysAndStrings();
		if(test.uniqueCharactersBit(input))
			System.out.println("unique character containing string");
		else
			System.out.println("duplicate character containing string");
	}
	//1.1/>
	
	//<1.2
	/*
	 * given the two strings, write a method to decide if one is a permutation of the other.
	 */
	private static boolean arePermutations(String s1, String s2){
		Map<Character,Integer> permutationMap = new HashMap<Character,Integer>();
		
		for (int i = 0; i != s1.length(); i++){
			char c = s1.charAt(i);
			if (permutationMap.containsKey(c)){
				permutationMap.put(c, permutationMap.get(c) + 1);
			}
			else
			{
				permutationMap.put(c, 1);
			}
				
		}
		
		for (int i = 0; i != s2.length(); i++){
			char c = s2.charAt(i);
			if (permutationMap.containsKey(c)){
				permutationMap.put(c, permutationMap.get(c) + 1);
				if (permutationMap.get(c) == 0) {
					permutationMap.remove(c);
				}
			}
			else
			{
				return false;
			}	
		};
		System.out.println(permutationMap.toString());
		return true;
	}
	
	//1.2/>
	
	//<1.3
	/*
	 * write a method to replace all spaces in a string with "%20". You may assume that the string has sufficient
	 * space at the end to hold the additional characters, and that You are given the "true" length of the string.
	 * 
	 */
	
	private static String URLifyString(String s){
		
		char array[] = s.toCharArray();
		StringBuilder sb = new StringBuilder();
		
		for (int i = 0; i < array.length; i++){
			if (array[i] == 32)
				sb.append("%20");
			else
			{
				sb.append(array[i]);
			}
		}
		System.out.println(sb);
		return sb.toString();
	}	
	
	//1.3/>
	
	//<1.5
	/*
	 * there are three types of edits that can be performed on strings : insert a character, remove a character or replace a character.
	 * Given two strings write a function to check if they are one edit or zero edits away
	 */
	
	
	
	//1.5/>
	
	
	//<1.6
	/*
	 * implement a method to perform basic string compression using the counts of repeated characters. For example, the string
	 * aabcccccaaa would become a2b1c5a3. If the compressed string would not become smaller than the original string, your method should return the original string. 
	 * You can assume the string has only uppercase and lowercase letters (a-z),
	 */
	
	public static String stringCompression(String s){
		
		if (s.length() < 3)
			return s;
		
		int initialLength = s.length();
		
		char [] chars = s.toCharArray();
		int count = 0;
		String compressedString = " ";
		char current = chars[0];
		
		for(int i = 0; i < initialLength; i++){
			
			char c = chars[i];
			if (current == c ){
				count++;
			}
			else
			{
				compressedString += current + String.valueOf(count);
			}
			
		}
		compressedString += current + String.valueOf(count);
		
		if (compressedString.length() < initialLength){
			System.out.println(compressedString);
			return compressedString;
		}
		System.out.println(s);
		return s;
	}
	
	
	
	
	
	
	
	
	
	
	
	//1.6/>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public static void main (String args[]){
		displayUniqueCharacters("ab"); //dummy running bitswitch solution <1.1/>
		System.out.println(arePermutations("hello","helol"));//<1.2/>
		URLifyString(" Hello   World My  Friend ");//<1.3/>
		stringCompression("aaaccccbb");
		
	}
	
}