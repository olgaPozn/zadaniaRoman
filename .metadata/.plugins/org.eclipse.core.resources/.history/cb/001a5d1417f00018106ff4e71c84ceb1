package zadaniaDodatkowe;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class ArraysAndStrings {
	//<1.1
	//solution without using data structures (bitswitch) + no use of static in the checking function
	boolean uniqueCharactersBit(String str){
		int checker = 0; //a-z string
		
		for(int i = 0; i < str.length(); i++){
			int bitAtIndex = str.charAt(i) - 'a';
			if((checker & (1 << bitAtIndex)) > 0)
				return false;
			checker = checker | (1 << bitAtIndex);
		}
		return true;	
	}
	protected static void displayUniqueCharacters(String input){
		ArraysAndStrings test = new ArraysAndStrings();
		if(test.uniqueCharactersBit(input))
			System.out.println("unique string");
		else
			System.out.println("duplicate string");
	}
	//1.1/>
	//solution using additional data structures ?? hashmap?	
	
	//<1.2
	
	static boolean arePermutations(String s1, String s2){
		Map<Character,Integer> permutationMap = new HashMap<Character,Integer>();
		
		for (int i = 0; i != s1.length(); i++){
			char c = s1.charAt(i);
			if (permutationMap.containsKey(c)){
				permutationMap.put(c, permutationMap.get(c) + 1);
			}
			else
			{
				permutationMap.put(c, 1);
			}
				
		}
		
		for (int i = 0; i != s2.length(); i++){
			char c = s2.charAt(i);
			if (permutationMap.containsKey(c)){
				permutationMap.put(c, permutationMap.get(c) + 1);
				if (permutationMap.get(c) == 0) {
					permutationMap.remove(c);
				}
			}
			else
			{
				return false;
			}	
		};
		System.out.println(permutationMap.toString());
		return true;
	}
	
	//1.2/>
	
	//<1.3
	/*
	 * write a method to replace all spaces in a string with "%20". You may assume that the string has sufficient
	 * space at the end to hold the additional characters, and that You are given the "true" length of the string.
	 * 
	 */
	
	public String URLifyString(String s){
		
		char array[] = s.toCharArray();
		StringBuilder sb = new StringBuilder();
		
		for (int i = 0; i < array.length; i++){
			if (array[i] == 32)
				sb.append("%20");
			else
			{
				sb.append(array[i]);
			}
		}
		return sb.toString();
	}
	
	
	
	
	
	//1.3/>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	public static void main (String args[]){
		displayUniqueCharacters("ab"); //dummy running bitswitch solution <1.1/>
		System.out.println(arePermutations("hello","helol"));
	}
	
}